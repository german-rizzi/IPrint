@inject NavigationManager NavigationManager
@using Blazorise.Extensions
@using IPrint.Models
@using IPrint.Services

<form>
    <div class="row">
        <div class="form-group col-12 col-md-6">
            <label for="id">Id equipo</label>
            <input type="number" class="form-control" id="id" @bind="UserConfig.ComputerId" required />
        </div>
        <div class="form-group col-12 col-md-6">
            <label for="name">Nombre equipo</label>
            <input type="text" class="form-control" id="name" @bind="UserConfig.ComputerName" required />
        </div>
    </div>
    <div class="form-group mt-2">
        <label for="token">Token</label>
        <input type="text" class="form-control" id="token" value="@UserConfig.Token" @onchange="async (ChangeEventArgs e) => await SetAndValidateToken(e.Value?.ToString() ?? string.Empty)" required />
        @if(ValidatingToken) {
            <p class="badge bg-light text-dark rounded-pill mt-2 d-flex justify-content-center align-items-center">Validando token <span class="spinner-border text-warning m-0 ms-2" style="height: 14px; width: 14px;"></span></p>
        }
        else if (IsValidToken.HasValue) {
            if (IsValidToken.Value)
            {
                <p class="badge bg-light text-dark rounded-pill mt-2 d-flex justify-content-center align-items-center">Token valido <span class="bi bi-check text-success m-0" style="font-size: 22px"></span></p>
            }
            else
            {
                <p class="badge bg-light text-dark rounded-pill mt-2 d-flex justify-content-center align-items-center">Token no valido<span class="bi bi-x text-danger m-0" style="font-size: 22px"></span></p>
            }
        }
    </div>
</form>
<div class="d-flex justify-content-end mt-5">
    <button type="button" class="btn btn-primary" disabled="@IsNotValidForm" @onclick="async () => await OnSubmit.InvokeAsync(UserConfig)">Guardar</button>
</div>

@code {
    [Inject]
    private EncuentraService EncuentraService { get; set; }
    
    [Inject]
    private AlertService AlertService { get; set; }
    
    [Parameter]
    public UserConfig? UserConfig { get; set; }

    [Parameter]
    public EventCallback<UserConfig> OnSubmit { get; set; }

    private bool? IsValidToken { get; set; }
    private bool ValidatingToken { get; set; }

    protected override void OnInitialized()
    {
        UserConfig ??= new();
    }

    private async Task SetAndValidateToken(string token)
    {
        UserConfig.Token = token;
        
        if (!token.IsNullOrEmpty())
        {
            ValidatingToken = true;
            var response = await EncuentraService.ValidateTokenAsync(token);
            var status = response?.Status;
            IsValidToken = "200".Equals(status);
        
            // if (!new []{"200", "401"}.Contains(status))
            // {
            //     AlertService.ShowAlert("Error", "Ha ocurrido un error inesperado al validar el token");
            // }
            // else if ("401".Equals(status))
            // {
            //     AlertService.ShowAlert("Error", "Token no valido");
            // }
        }

        ValidatingToken = false;
    }

    private bool IsNotValidForm => UserConfig.ComputerId < 1 || string.IsNullOrEmpty(UserConfig.ComputerName) || string.IsNullOrEmpty(UserConfig.Token) || IsValidToken.HasValue && IsValidToken.Value;
}
